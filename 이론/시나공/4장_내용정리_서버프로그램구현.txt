### SECTION 062 ###
1. 개발 환경 구축
- 개발 프로젝트를 이해하고 소프트웨어 및 하드웨어 장비를 구축하는 것

### SECTION 063 ###
1. 소프트웨어 아키텍처
- 소프트웨어를 구성하는 요소들 간의 관계를 표현하는 시스템의 구조 또는 구조체

2. 모듈화
- 시스템의 기능들을 모듈단위로 나누는것

3. 추상화
- 전체적이고 포괄적인 개념을 설계한 후 구체화시켜 나가는 것

4. 단계적 분해
- 상위의 중요 개념으로부터 하위의 개념으로 구체화시키는 분할기법

5. 정보은닉
- 모듈 내부에 포함된 절차와 자료들의 정보가 감추어져 다른 모듈이 접근하거나 변경하지 못하도록 하는 기법

6. 협약(Contract)에 의한 설계
- 컴포넌트를 설계할 때 클래스에 대한 여러 가정을 공유할 수 있도록 명세한 것

### SECTION 064 ###
1. 아키텍처 패턴
- 아키텍처를 설계할 때 참조할 수 있는 전형적인 해결방식 또는 예제

2. 레이어 패턴
- 시스템을 계층으로 구분하여 구성하는 패턴

3. 클라이언트-서버 패턴
- 하나의 서버 컴포넌트와 다수의 클라이언트 컴포넌트로 구성되는 패턴

4. 파이프-필터 패턴
- 데이터 스트림 절차의 각 단계를 필터로 캡슐화하여 파이프를 통해 전송하는 패턴

5. 모델-뷰-컨트롤러 패턴
- 서브시스템을 모델, 뷰, 컨트롤러로 구조화하는 패턴

### SECTION 065 ###
1. 객체지향
- 각 요소들을 객체로 만든 후, 객체들을 조립해서 소프트웨어를 개발하는 기법

2. 객체
- 데이터와 이를 처리하기 위한 함수를 묶어 놓은 소프트웨어 모듈

3. 클래스
- 공통된 속성과 연산을 갖는 객체의 집합

4. 메시지
- 객체들 간의 상호작용을 하는데 사용되는 수단

5. 캡슐화
- 외부에서의 접근을 제한하기 위해 인터페이스를 제외한 세부내용을 은닉하는 것

6. 상속
- 상위 클래스의 모든 속성과 연산을 하위 클래스가 물려받는 것

7. 다형성
- 하나의 메시지에 대해 각각의 객체가 고유한 방법으로 응답할 수 있는 능력

8. 연관성
- 두 개 이상의 객체들이 상호 참조하는 관계

### SECTION 066 ###
1. 객체지향 분석
- 사용자의 요구사항과 관련된 객체, 속성, 연산, 관계 등을 정의하여 모델링하는 작업

2. 럼바우 분석기법
- 모든 소프트웨어 구성 요소를 그래픽 표기법을 이용하여 모델링하는 기법

3. 객체지향 설계원칙
- 변경이나 확장에 유연한 시스템을 설계하기 위해 지켜져야 할 원칙

### SECTION 067 ###
1. 모듈
- 모듈화를 통해 분리된 시스템의 각 기능

2. 결합도
- 모듈간에 상호 의존하는 정도

3. 응집도
- 모듈의 내부 요소들이 서로 관련되어 있는 정도

4. 팬인 / 팬아웃
- 팬인 : 어떤 모듈을 제어하는 모듈의 수
- 팬아웃 : 어떤 모듈에 의해 제어되는 모듈의 수

5. N-S차트
- 논리의 기술에 중점을 두고 도형을 이용해 표현하는 방법

### SECTION 068 ###
1. 단위 모듈
- 한 가지 동작을 수행하는 기능을 모듈로 구현한 것

2. IPC(Inter-Process-Communication)
- 모듈간 통신 방식을 구현하기 위해 사용되는 대표적인 프로그래밍 인터페이스의 집합

3. 단위 테스트
- 모듈이 정해진 기능을 정확히 수행하는지 검증하는 것

4. 테스트 케이스
- 소프트웨어가 사용자의 요구사항을 정확하게 준수했는지를 확인하기 위한 테스트 항목에 대한 명세서

### SECTION 069 ###
1. 공통모듈
- 여러 프로그램에서 공통으로 사용할 수 있는 모듈

2. 재사용
- 이미 개발된 기능들을 새로운 시스템이나 기능 개발에 사용하기 적합하도록 최적화하는 작업

### SECTION 070 ###
1. 코드
- 자료의 분류 / 조합 / 집계 / 추출을 용이하게 하기 위해 사용하는 기호

### SECTION 071 ###
1. 디자인 패턴
- 모듈 간의 관계 및 인터페이스를 설계할 때 참조할 수 있는 전형적인 해결방식 또는 예제

2. 생성패턴
- 클래스나 객체의 생성과 참조과정을 정의하는 패턴

3. 구조패턴
- 클래스나 객체들을 조합하여 더 큰 구조로 만드는 패턴

4. 행위패턴
- 클래스나 객체들이 서로 상호작용하는 방법이나 책임 분배방법을 정의하는 패턴

### SECTION 072 ###
1. 통합 개발 환경(IDE)
- 개발에 필요한 다양한 툴을 하나의 인터페이스로 통합하여 제공하는 환경

2. 빌드도구
- 소스 코드 파일들을 컴퓨터에서 실행할 수 있는 제품소프트웨어로 변환하는 과정 또는 결과물

3. 기타협업도구
- 개발에 참여하는 사람들이 서로 다른 작업 환경에서 원활히 프로젝트를 수행할 수 있도록 도와주는 도구

### SECTION 073 ###
1. 서버개발
- 웹 애플리케이션 로직을 구현할 서버 프로그램을 제작하여 웹 애플리케이션 서버에 탑재하는 것

2. 서버개발 프레임워크
- 다양한 네트워크 설정, 요청 및 응답처리, 아키텍처 모델 구현 등을 손쉽게 처리할 수 있도록 클래스나 인터페이스를 제공하는 소프트웨어

3. 서버 개발 과정
- DTO/VO, SQL, DAO, Service, Controller를 각각 구현하는 과정

### SECTION 074 ###
1. 배치 프로그램
- 여러 작업들을 미리 정해진 일련의 순서에 따라 일괄적으로 처리하도록 만든 프로그램

2. 배치 스케줄러
- 일괄처리 작업이 설정된 주기에 맞춰 자동으로 수행되도록 지원해주는 도구
